[force_move]
enable_force_move: True

[respond]
[exclude_object]
[pause_resume]
[display_status]

[gcode_macro _globals]
variable_filament_sensor_enabled: 1 # NOTE Enable(1) or disable(0) the filament sensor, if one is connected
variable_beeping_enabled: 0 # NOTE Enable(1) or disable(0) beeping everywhere except during gantry calibration
variable_bed_temp_over: 10 # NOTE Start print if bed temperature is over by this amount, otherwise wait for temperature drop
variable_kamp_enable: 1 # NOTE Enable(1) or disable(0) KAMP (adaptive mesh)
variable_pre_purge_prime_length: 1.40
gcode:
    # Don't delete this section

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

[gcode_macro PRINT_START]
gcode:

	# get params
	RESPOND type=command MSG="reading passed slicer settings ..."
	 {% set bedtemp = params.TEMP_BED|int %}
    {% set hotendtemp = params.TEMP_HOTEND|int %}
    {% set chambertemp = params.TEMP_CHAMBER|default(0)|int %}
    {% set createmesh = params.CREATE_MESH|default(1)|int %}

	# pre flight checks
	RESPOND type=command MSG="enabling filament sensor ..."
	RESPOND type=command MSG="homing X+Y axes ..." 
	M104 S150
	M140 S{bedtemp}
	G90
	G28
	
	# warm up for auto level
	RESPOND type=command MSG="warming plate and hotend for Z axis home ..."
	M109 S150
	M190 S{bedtemp}

	RESPOND type=command MSG="homing Z axis ..."
	G28 Z
    
	# auto level
	RESPOND type=command MSG="running KAMP ..."
    {% if createmesh == 1 %}
		BED_MESH_CALIBRATE 
		BED_MESH_PROFILE LOAD=default
    {% endif %}

	G1 X0 Y0 F999999

	RESPOND type=command MSG="heating hotend and purging ..."
	M109 S{hotendtemp}
	LINE_PURGE
	
	RESPOND type=command MSG="! PRINT STARTED !"

[gcode_macro PRINT_PRESENT]
gcode:

	G90

	# conditional raise z otherwise still move X+Y axes
	{% if (printer.toolhead.position.z + 20) < printer.toolhead.axis_maximum.z %}
		{% set retract_z = printer.toolhead.position.z + 5 %}
		G1 X00 Y300 Z{retract_z} F999999
	{% else %}
		G1 X00 Y300 F999999
	{% endif %}

[gcode_macro PRINT_END]
gcode:

	RESPOND type=command MSG="! PRINT ENDED !"

	# retract to prevent a string
	RESPOND type=command MSG="retracting ..." 
	# G1 E-.8 F20000

	# conditional raise z otherwise still move X+Y axes
	RESPOND type=command MSG="attempting to raise nozzle ..." 
	{% if (printer.toolhead.position.z + 20) < printer.toolhead.axis_maximum.z %}
		{% set retract_z = printer.toolhead.position.z + 10 %}
		G1 Z{retract_z} F999999
	{% endif %}

	RESPOND type=command MSG="disabling heaters ..." 
	M104 S0
	M140 S0

	RESPOND type=command MSG="pause for 10 seconds for additional cooling ..." 
	G4 P10000

	# zero fan
	RESPOND type=command MSG="zeroing fan ..." 
	M106 S0

	# disable filament sensor
	RESPOND type=command MSG="disabling filament sensor ..." 

    PRINT_PRESENT

[gcode_macro FILAMENT_LOAD]
gcode:

	RESPOND type=command MSG="! FILAMENT INSERTED !"
    M83                            ; set extruder to relative
	RESPOND type=command MSG="feeding filament ..."
    G1 E100 F500                   ; load
    
[gcode_macro FILAMENT_UNLOAD]
gcode:

    M83                            ; set extruder to relative
	RESPOND type=command MSG="extruding to prevent clog ..."
    G1 E30 F500                    ; extrude a little to soften tip
	RESPOND type=command MSG="unloading filament ..."
    G1 E-50 F1000                  ; retract

[gcode_macro FILAMENT_INSERT]
gcode:

	RESPOND type=command MSG="! FILAMENT INSERTED !"

[gcode_macro FILAMENT_RUNOUT]
gcode:

	RESPOND type=command MSG="! FILAMENT RUNOUT !"
	RESPOND type=command MSG="unloading filament ..."
	FILAMENT_UNLOAD
	RESPOND type=command MSG="! READY FOR FILAMENT_LOAD !"

[gcode_macro M600000]
gcode:

    # {% set X = params.X|default(50)|float %}
    # {% set Y = params.Y|default(0)|float %}
    # {% set Z = params.Z|default(10)|float %}

    SAVE_GCODE_STATE NAME=M600_state

    PAUSE
    
	# relative positioning
    G91
    G1 E-.8 F2700
    
    # G1 Z{Z}
    # G90
    # G1 X{X} Y{Y} F3000
	
    G91
    G1 E-50 F1000

    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro M600]
gcode:
    PAUSE                ; Pause

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F20000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        # M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=259200                                                       ; set timeout to 72 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}

        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=400                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=400                          ; restore position
        CLEAR_PAUSE
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro _CG28]
# Conditional homing
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
